<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="gradientPanel3.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        x90oMTH/B6x1KaPbV8mVAAAAAElFTkSuQmCC
</value>
  </data>
</root>